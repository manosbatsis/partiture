buildscript {
    ext {
        corda_release_group = 'net.corda'
        corda_release_version = '4.0-RC03'
        corda_platform_version = '4'
        corda_gradle_plugins_version = '4.0.37'
        dokka_version = '0.9.17'
        junitVersion = '5.1.1'
        kotlin_version = '1.2.71'
    }

    repositories {
        mavenLocal()
        jcenter()
        maven { url 'https://ci-artifactory.corda.r3cev.com/artifactory/corda-releases' }

    }
    dependencies {
        classpath "net.corda.plugins:publish-utils:$corda_gradle_plugins_version"
        classpath "net.corda.plugins:quasar-utils:$corda_gradle_plugins_version"
        classpath "net.corda.plugins:cordformation:$corda_gradle_plugins_version"
        classpath "net.corda.plugins:cordapp:$corda_gradle_plugins_version"
        classpath "net.corda.plugins:api-scanner:$corda_gradle_plugins_version"
        // kotlin plugins
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath "org.jetbrains.kotlin:kotlin-allopen:$kotlin_version"
        classpath "org.jetbrains.kotlin:kotlin-noarg:$kotlin_version"
        classpath "org.jetbrains.dokka:dokka-gradle-plugin:${dokka_version}"
        // release to Maven Central through Sonatype OSSRH
        // without the need to use Nexus GUI
        classpath "io.codearte.gradle.nexus:gradle-nexus-staging-plugin:0.12.0"
    }
}

plugins {
    id "com.github.hierynomus.license" version "0.14.0"
}

apply plugin: 'org.jetbrains.dokka'
apply plugin: 'io.codearte.nexus-staging'
nexusStaging {
    packageGroup = 'com.github.manosbatsis.partiture'
    stagingProfileId = 'com.github.manosbatsis'
}

allprojects {
    repositories {
        mavenLocal()
        jcenter()
        mavenCentral()
        maven { url 'https://jitpack.io' }
        maven { url 'https://ci-artifactory.corda.r3cev.com/artifactory/corda-releases' }
        //Needed only for Corda SNAPSHOT versions
        maven { url 'https://ci-artifactory.corda.r3cev.com/artifactory/corda-dev/' }
        //Needed only for SNAPSHOT versions
        maven { url "http://oss.sonatype.org/content/repositories/snapshots/" }
    }
    group = "com.github.manosbatsis.partiture"
    version = "0.1"

    apply from: "$rootDir/gradle/published.gradle"
    apply plugin: 'project-report'
}
subprojects {
    apply plugin: 'license'
    apply plugin: 'kotlin'
    dokka {
        outputFormat = 'javadoc'
        outputDirectory = javadoc.destinationDir
        //inputs.dir 'src/main/kotlin'
        linkMapping {
            dir = "src/main/kotlin"
            url = "https://github.com/manosbatsis/corbeans/tree/master/${project.name}/src/main/kotlin"
            suffix = "#L"
        }
    }

    task javadocJar(type: Jar, dependsOn: dokka) {
        classifier = 'javadoc'
        from javadoc.destinationDir
    }

    task sourcesJar(type: Jar, dependsOn: classes) {
        classifier = 'sources'
        from sourceSets.main.allSource
    }

// and hook them up into the artifacts collection together
// with the project jar itself when publishing
    artifacts {
        archives javadocJar, sourcesJar
    }
    tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).all {
        kotlinOptions {
            languageVersion = "1.2"
            apiVersion = "1.2"
            jvmTarget = "1.8"
            freeCompilerArgs = ["-Xjsr305=strict"]
            javaParameters = true   // Useful for reflection.
        }
    }
    test {
        useJUnitPlatform {
            includeEngines 'junit-jupiter'
            testLogging {
                events "passed", "skipped", "failed", "standardOut", "standardError"
            }
            exclude '**/*IntegrationTest.class'
        }
    }
    // Run integration tests using junit5
    task integrationTest(type: Test) {
        useJUnitPlatform {
            includeEngines 'junit-jupiter'
            testLogging {
                events "passed", "skipped", "failed", "standardOut", "standardError"
            }
            include '**/*IntegrationTest.class'

        }
    }
    dependencies {
        implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
        implementation "org.jetbrains.kotlin:kotlin-reflect:$kotlin_version"

        testImplementation("org.jetbrains.kotlin:kotlin-test:$kotlin_version")
        testImplementation "org.junit.jupiter:junit-jupiter-params:$junitVersion"
        testImplementation "org.junit.jupiter:junit-jupiter-api:$junitVersion"

        testRuntimeOnly "org.junit.vintage:junit-vintage-engine:$junitVersion"
        testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:$junitVersion"
    }
    // convenient report on all dependencies
    task allDeps(type: DependencyReportTask) {}

    configurations {
        all {
            // Exclude old Junit since we use jupiter
            exclude group: 'junit', module: 'junit'
            // Stop deprecation warnings since we use stdlib-jdkX
            exclude group: 'org.jetbrains.kotlin', module: 'kotlin-stdlib-jre8'
            exclude group: 'org.jetbrains.kotlin', module: 'kotlin-stdlib-jre7'
        }
    }

    license {
        header rootProject.file("${rootProject.rootDir}/etc/license/header.txt")
        includes(["**/*.java", "**/*.kt"])
        mapping {
            kt='SLASHSTAR_STYLE'
        }
        strictCheck true
    }
}

configurations {
    dokkapath
    dokkapath.description = "dokka project classpath"
}

dependencies {
    dokkapath fileTree (include: ['*.jar'])
}

task dokka (type: org.jetbrains.dokka.gradle.DokkaTask, overwrite: true) {
    moduleName = "$rootProject.name"
    outputDirectory = "$buildDir/dokka"
    outputFormat = "html"
    processConfigurations = []

    sourceDirs = files(subprojects.collect {
        p ->

            def path = new File(p.projectDir, "/src/main/kotlin")

            def relativePath = rootDir.toPath().relativize(path.toPath()).toString()
            linkMapping {
                dir = path
                url = "https://....../blob/master/$relativePath"
                suffix = "#L"
            }

            return path
    })
}
