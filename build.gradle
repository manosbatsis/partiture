buildscript {
    ext {
        artemis_version = "2.6.2"
        corbeans_version = '0.19'
        corda_release_group = 'net.corda'
        corda_release_version = '4.0-RC03'
        // used for cordapi.info
        corda_platform_version = '4'
        corda_gradle_plugins_version = '4.0.37'
        dependency_management_version ='1.0.6.RELEASE'
        hibernate_version = '5.3.6.Final'
        jackson_version = '2.9.5'
        jcabi_manifests_version = '1.1'
        junitVersion = '5.1.1'
        kotlin_version = '1.2.71'
        kotlinx_coroutines_version = '0.30.2'
        quasar_version = '0.7.10'
        scrudbeans_version = '0.7'
        spring_boot_version = '2.1.1.RELEASE'
        springfox_version = '2.9.2'
    }

    repositories {
        mavenLocal()
        jcenter()
        maven { url 'https://ci-artifactory.corda.r3cev.com/artifactory/corda-releases' }

    }
    dependencies {
        classpath "net.corda.plugins:publish-utils:$corda_gradle_plugins_version"
        classpath "net.corda.plugins:quasar-utils:$corda_gradle_plugins_version"
        classpath "net.corda.plugins:cordformation:$corda_gradle_plugins_version"
        classpath "net.corda.plugins:cordapp:$corda_gradle_plugins_version"
        classpath "net.corda.plugins:api-scanner:$corda_gradle_plugins_version"
        // kotlin plugins
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath "org.jetbrains.kotlin:kotlin-allopen:$kotlin_version"
        classpath "org.jetbrains.kotlin:kotlin-noarg:$kotlin_version"
    }
}

plugins {
    id "com.github.hierynomus.license" version "0.14.0"
}

allprojects {
    repositories {
        mavenLocal()
        jcenter()
        mavenCentral()
        maven { url 'https://jitpack.io' }
        maven { url 'https://ci-artifactory.corda.r3cev.com/artifactory/corda-releases' }
        //Needed only for Corda SNAPSHOT versions
        maven { url 'https://ci-artifactory.corda.r3cev.com/artifactory/corda-dev/' }
        //Needed only for SNAPSHOT versions
        maven { url "http://oss.sonatype.org/content/repositories/snapshots/" }
    }
    group = "com.github.manosbatsis.cordapi"
    version = "0.1-SNAPSHOT"
}
subprojects {
    apply plugin: 'license'
    apply plugin: 'kotlin'
    apply plugin: 'maven'
    tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).all {
        kotlinOptions {
            languageVersion = "1.2"
            apiVersion = "1.2"
            jvmTarget = "1.8"
            freeCompilerArgs = ["-Xjsr305=strict"]
            javaParameters = true   // Useful for reflection.
        }
    }
    test {
        useJUnitPlatform {
            includeEngines 'junit-jupiter'
            testLogging {
                events "passed", "skipped", "failed", "standardOut", "standardError"
            }
            exclude '**/*IntegrationTest.class'
        }
    }
    // Run integration tests using junit5
    task integrationTest(type: Test) {
        useJUnitPlatform {
            includeEngines 'junit-jupiter'
            testLogging {
                events "passed", "skipped", "failed", "standardOut", "standardError"
            }
            include '**/*IntegrationTest.class'

        }
    }
    dependencies {
        implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
        implementation "org.jetbrains.kotlin:kotlin-reflect:$kotlin_version"

        testImplementation("org.jetbrains.kotlin:kotlin-test:$kotlin_version")
        testImplementation "org.junit.jupiter:junit-jupiter-params:$junitVersion"
        testImplementation "org.junit.jupiter:junit-jupiter-api:$junitVersion"

        testRuntimeOnly "org.junit.vintage:junit-vintage-engine:$junitVersion"
        testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:$junitVersion"
    }
    // convenient report on all dependencies
    task allDeps(type: DependencyReportTask) {}

    configurations {
        all {
            // Exclude old Junit since we use jupiter
            exclude group: 'junit', module: 'junit'
            // Stop deprecation warnings since we use stdlib-jdkX
            exclude group: 'org.jetbrains.kotlin', module: 'kotlin-stdlib-jre8'
            exclude group: 'org.jetbrains.kotlin', module: 'kotlin-stdlib-jre7'
        }
    }

    license {
        header rootProject.file("${rootProject.rootDir}/etc/license/header.txt")
        includes(["**/*.java", "**/*.kt"])
        mapping {
            kt='SLASHSTAR_STYLE'
        }
        strictCheck true
    }
}
