// The maven plugin for Gradle can take care of the metadata,
// generate the required pom.xml file as well as take care
// of the deployment of the build output to the repository.
// The signing plugin allows you to get the components,
// created by standard Gradle tasks, signed:
apply plugin: 'maven'
apply plugin: 'signing'

// Conditional signature of artifacts
if (project.findProperty('signing.password') != '<YOUR-PASSWORD>') {
	signing {
		sign configurations.archives
	}
}

// Upload the archives
uploadArchives {
	repositories {
		mavenDeployer {
			beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

			repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
				authentication(userName: ossrhUsername, password: ossrhPassword)
			}

			snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots/") {
				authentication(userName: ossrhUsername, password: ossrhPassword)
			}

			// Add required metadata to POM
			pom {
				project {
					name project.name
					packaging project.name == rootProject.name ? 'pom' : 'jar'
					description 'Corda integration for Spring Boot.'
					url 'https://manosbatsis.github.io/corbeans/'

					scm {
						connection 'scm:git:git://github.com/manosbatsis/corbeans.git'
						developerConnection 'scm:git:ssh://github.com/manosbatsis/corbeans.git'
						url 'http://github.com/manosbatsis/corbeans/tree/master'
					}

					licenses {
						license {
							name 'GNU Lesser General Public License, Version 3'
							url 'https://www.gnu.org/licenses/lgpl-3.0.txt'
						}
					}

					developers {
						developer {
							id 'manosbatsis'
							name 'Manos Batsis'
							email 'manosbatsis@gmail.com'
						}
					}
				}
				withXml {
					def dependenciesNode = asNode().appendNode('dependencies')
					//Iterate over the compile dependencies (we don't want the test ones), adding a <dependency> node for each
					configurations.compile.allDependencies.each {
						if(it.group != null && (it.name != null || "unspecified".equals(it.name)) && it.version != null)
						{
							def dependencyNode = dependenciesNode.appendNode('dependency')
							dependencyNode.appendNode('groupId', it.group)
							dependencyNode.appendNode('artifactId', it.name)
							dependencyNode.appendNode('version', it.version)
						}
					}
				}
			}
		}
	}
}